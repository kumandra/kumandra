[workspace]
members = [
    "runtime",

    "primitives/core",
    "primitives/executor",
    "primitives/consensus",
    "primitives/rpc",
    "primitives/neak-node",
    "primitives",

    # Kumandra Pallet
    "pallets/executor",
    "pallets/feeds",
    "pallets/object-store",
    "pallets/offences",
    "pallets/rewards",
    "pallets/kumandra",
    "pallets/transaction-fees",

    # Modules
    "modules/solving",
    "modules/archiving",
    "modules/consensus",

    # Utilities
    "utils/kumandra-wasm-tools",
    "utils/fraud-proof",

    # Node
    "node",
    "node/network",
    "node/service",
    "node/rpc",


    # Selendra
    "selendra/node/collation-generation",
    "selendra/node/core/chain-api",
    "selendra/node/core/runtime-api",
    "selendra/node/jaeger",
    "selendra/node/metered-channel",
    "selendra/node/metrics",
    "selendra/node/overseer",
    "selendra/node/overseer/overseer-gen",
    "selendra/node/overseer/overseer-gen/proc-macro",
    "selendra/node/subsystem",
    "selendra/node/subsystem-types",
    "selendra/node/subsystem-util",


    # Cumulus
    "cumulus/client/block-builder",
    "cumulus/client/cli",
    "cumulus/client/neak-service",
    "cumulus/client/neak-executor",
    "cumulus/client/consensus/common",
    "cumulus/client/consensus/relay-chain",
    "cumulus/client/executor-gossip",
    "cumulus/pallets/executive",
    "cumulus/parachain-template/node",
    "cumulus/parachain-template/runtime",
    "cumulus/primitives",
    "cumulus/test/runtime",
    "cumulus/test/service",

    # Substrate
    "substrate/*",

    # Kumandra Test
    "test/kumandra-test-client",
    "test/kumandra-test-runtime",
    "test/kumandra-test-service",
]

[profile.release]
# Selendra runtime requires unwinding.
panic = "unwind"
opt-level = 3

# make sure dev builds with backtrace do
# not slow us down
[profile.dev.package.backtrace]
inherits = "release"

[profile.production]
inherits = "release"
lto = true
codegen-units = 1

[profile.testnet]
inherits = "release"
debug = 1 # debug symbols are useful for profilers
debug-assertions = true
overflow-checks = true

# The list of dependencies below (which can be both direct and indirect dependencies) are crates
# that are suspected to be CPU-intensive, and that are unlikely to require debugging (as some of
# their debug info might be missing) or to require to be frequently recompiled. We compile these
# dependencies with `opt-level=3` even in "dev" mode in order to make "dev" mode more usable.
# The majority of these crates are cryptographic libraries.
#
# This list is ordered alphabetically.
[profile.dev.package]
blake2 = { opt-level = 3 }
blake2-rfc = { opt-level = 3 }
blake2b_simd = { opt-level = 3 }
chacha20poly1305 = { opt-level = 3 }
cranelift-codegen = { opt-level = 3 }
cranelift-wasm = { opt-level = 3 }
crc32fast = { opt-level = 3 }
crossbeam-deque = { opt-level = 3 }
crypto-mac = { opt-level = 3 }
curve25519-dalek = { opt-level = 3 }
ed25519-dalek = { opt-level = 3 }
flate2 = { opt-level = 3 }
futures-channel = { opt-level = 3 }
hashbrown = { opt-level = 3 }
hash-db = { opt-level = 3 }
hmac = { opt-level = 3 }
httparse = { opt-level = 3 }
integer-sqrt = { opt-level = 3 }
keccak = { opt-level = 3 }
libm = { opt-level = 3 }
librocksdb-sys = { opt-level = 3 }
libsecp256k1 = { opt-level = 3 }
libz-sys = { opt-level = 3 }
mio = { opt-level = 3 }
nalgebra = { opt-level = 3 }
num-bigint = { opt-level = 3 }
parking_lot = { opt-level = 3 }
parking_lot_core = { opt-level = 3 }
percent-encoding = { opt-level = 3 }
primitive-types = { opt-level = 3 }
reed-solomon-erasure = { opt-level = 3 }
ring = { opt-level = 3 }
rustls = { opt-level = 3 }
sha2 = { opt-level = 3 }
sha3 = { opt-level = 3 }
sloth256-189 = { opt-level = 3 }
smallvec = { opt-level = 3 }
snow = { opt-level = 3 }
kumandra-core-primitives = { opt-level = 3 }
kumandra-archiving = { opt-level = 3 }
twox-hash = { opt-level = 3 }
uint = { opt-level = 3 }
wasmi = { opt-level = 3 }
x25519-dalek = { opt-level = 3 }
yamux = { opt-level = 3 }
zeroize = { opt-level = 3 }